# -*- coding: utf-8 -*-
"""Weather_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzW3UjekvczxBqDK5fGr3Bc1XOIs_JuU
"""

# Imports
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import matplotlib.pyplot as plt

#Loading The Dataset
df_Banglore=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Bangalore_1990_2022_BangaloreCity.csv")
df_Madras=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Chennai_1990_2022_Madras.csv")
df_Delhi=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Delhi_NCR_1990_2022_Safdarjung.csv")
df_Lucknow=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Lucknow_1990_2022.csv")
df_Mumbai=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Mumbai_1990_2022_Santacruz.csv")
df_Rajasthan=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Rajasthan_1990_2022_Jodhpur.csv")
#df7=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/Station_GeoLocation_Longitute_Latitude_Elevation_EPSG_4326.csv")
#df8=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/weather_Bhubhneshwar_1990_2022.csv")
#df9=pd.read_csv("/content/drive/MyDrive/Temperature_And_Precipitation_Cities_IN/weather_Rourkela_2021_2022.csv")

"""# **Banglore**"""

df_Banglore.head()

df_Banglore['tavg'].plot(figsize=(12,5))

df_Banglore.isnull().sum()

"""Replacing null values of tavg with average of tmax and tmin 
And if either tmax or tmin is null then replacing it with mean of tavg
"""

# Calculate the mean of 'tavg'
tavg_mean = df_Banglore['tavg'].mean()


# Calculate the average of 'tmax' and 'tmin' and update the 'tavg' column for null values
df_Banglore.loc[df_Banglore['tavg'].isnull(), 'tavg'] = df_Banglore['tmax'] + df_Banglore['tmin'] / 2

# Replace null values in 'tavg' with the mean of 'tavg'
df_Banglore['tavg'].fillna(tavg_mean, inplace=True)

print(tavg_mean)

df_Banglore.isnull().sum()

"""Checking for Stationarity"""

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df_Banglore['tavg'])

"""as p<0.05 Data is stationary

Now Traing the model using ARIMA Model
"""

pip install pmdarima

from pmdarima import auto_arima
stepwise_fit = auto_arima(df_Banglore['tavg'], trace=True,
suppress_warnings=True)

"""Splitting Data into Training And Testing"""

print(df_Banglore.shape)
train=df_Banglore.iloc[:-30]
test=df_Banglore.iloc[-30:]
print(train.shape,test.shape)

from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(train['tavg'],order=(2,0,2))
model=model.fit()
model.summary()

start=len(train)
end=len(train)+len(test)-1
pred=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
pred.plot(legend=True)
test['tavg'].plot(legend=True)

# Set the title and axis labels
plt.title('Predicted vs Actual tavg Values')
plt.xlabel('Index')
plt.ylabel('tavg')

# Set the y-axis ticks to intervals of 10
plt.yticks(range(0, max(test['tavg'].astype(int))+20, 5))


plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
test['tavg'].mean()
rmse=sqrt(mean_squared_error(pred,test['tavg']))
print(rmse)

test_mean = test['tavg'].mean()
print((rmse/test_mean) * 100)

"""as root mean square error is very low in comparision to mean of test
(Only 4.564%), we can say that the ARIMA model is a success

# **Madras**
"""

df_Madras.head()

df_Madras['tavg'].plot(figsize=(12,5))

df_Madras.isnull().sum()

# Calculate the mean of 'tavg'
tavg_mean = df_Madras['tavg'].mean()


# Calculate the average of 'tmax' and 'tmin' and update the 'tavg' column for null values
df_Madras.loc[df_Madras['tavg'].isnull(), 'tavg'] = df_Madras['tmax'] + df_Madras['tmin'] / 2

# Replace null values in 'tavg' with the mean of 'tavg'
df_Madras['tavg'].fillna(tavg_mean, inplace=True)

df_Madras.isnull().sum()

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df_Madras['tavg'])

from pmdarima import auto_arima
stepwise_fit = auto_arima(df_Madras['tavg'], trace=True,
suppress_warnings=True)

print(df_Madras.shape)
mtrain=df_Madras.iloc[:-30]
mtest=df_Madras.iloc[-30:]
print(mtrain.shape,mtest.shape)

del model
from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(mtrain['tavg'],order=(1,1,1))
model=model.fit()
model.summary()

start=len(train)
end=len(train)+len(test)-1
pred=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
pred.plot(legend=True)
mtest['tavg'].plot(legend=True)

# Set the title and axis labels
plt.title('Predicted vs Actual tavg Values')
plt.xlabel('Index')
plt.ylabel('tavg')

# Set the y-axis ticks to intervals of 10
plt.yticks(range(0, max(mtest['tavg'].astype(int))+5, 2))

plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
mtest['tavg'].mean()
rmse=sqrt(mean_squared_error(pred,mtest['tavg']))
print(rmse)

mtest_mean = mtest['tavg'].mean()
print((rmse/mtest_mean) * 100)

"""# **Delhi**"""

df_Delhi.head()

df_Delhi['tavg'].plot(figsize=(12,5))

df_Delhi.isnull().sum()

# Calculate the mean of 'tavg'
tavg_mean = df_Delhi['tavg'].mean()

# Calculate the average of 'tmax' and 'tmin' and update the 'tavg' column for null values
df_Delhi.loc[df_Delhi['tavg'].isnull(), 'tavg'] = df_Delhi['tmax'] + df_Delhi['tmin'] / 2

# Replace null values in 'tavg' with the mean of 'tavg'
df_Delhi['tavg'].fillna(tavg_mean, inplace=True)

df_Delhi.isnull().sum()

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df_Delhi['tavg'])

from pmdarima import auto_arima
stepwise_fit = auto_arima(df_Delhi['tavg'], trace=True,
suppress_warnings=True)

print(df_Delhi.shape)
dtrain=df_Delhi.iloc[:-30]
dtest=df_Delhi.iloc[-30:]
print(dtrain.shape,dtest.shape)

del model
from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(dtrain['tavg'],order=(5,0,2))
model=model.fit()
model.summary()

start=len(train)
end=len(train)+len(test)-1
pred=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
pred.plot(legend=True)
dtest['tavg'].plot(legend=True)

# Set the title and axis labels
plt.title('Predicted vs Actual tavg Values')
plt.xlabel('Index')
plt.ylabel('tavg')

# Set the y-axis ticks to intervals of 10
plt.yticks(range(0, max(dtest['tavg'].astype(int))+5, 2))

plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
dtest['tavg'].mean()
rmse=sqrt(mean_squared_error(pred,dtest['tavg']))
print(rmse)

dtest_mean = dtest['tavg'].mean()
print((rmse/dtest_mean) * 100)

"""# **Lucknow**"""

df_Lucknow.head()

df_Lucknow['tavg'].plot(figsize=(12,5))

df_Lucknow.isnull().sum()

# Calculate the mean of 'tavg'
tavg_mean = df_Lucknow['tavg'].mean()

# Calculate the average of 'tmax' and 'tmin' and update the 'tavg' column for null values
df_Lucknow.loc[df_Lucknow['tavg'].isnull(), 'tavg'] = df_Lucknow['tmax'] + df_Lucknow['tmin'] / 2

# Replace null values in 'tavg' with the mean of 'tavg'
df_Lucknow['tavg'].fillna(tavg_mean, inplace=True)

df_Lucknow.isnull().sum()

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df_Lucknow['tavg'])

from pmdarima import auto_arima
stepwise_fit = auto_arima(df_Lucknow['tavg'], trace=True,
suppress_warnings=True)

print(df_Lucknow.shape)
ltrain=df_Lucknow.iloc[:-30]
ltest=df_Lucknow.iloc[-30:]
print(ltrain.shape,ltest.shape)

del model
from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(ltrain['tavg'],order=(4,0,2))
model=model.fit()
model.summary()

start=len(ltrain)
end=len(ltrain)+len(ltest)-1
pred=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
pred.plot(legend=True)
ltest['tavg'].plot(legend=True)

# Set the title and axis labels
plt.title('Predicted vs Actual tavg Values')
plt.xlabel('Index')
plt.ylabel('tavg')

# Set the y-axis ticks to intervals of 10
plt.yticks(range(0, max(ltest['tavg'].astype(int))+5, 2))

plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
ltest['tavg'].mean()
rmse=sqrt(mean_squared_error(pred,ltest['tavg']))
print(rmse)

ltest_mean = ltest['tavg'].mean()
print((rmse/ltest_mean) * 100)

"""# **Mumbai**"""

df_Mumbai.head()

df_Mumbai['tavg'].plot(figsize=(12,5))

df_Mumbai.isnull().sum()

# Calculate the mean of 'tavg'
tavg_mean = df_Mumbai['tavg'].mean()


# Calculate the average of 'tmax' and 'tmin' and update the 'tavg' column for null values
df_Mumbai.loc[df_Mumbai['tavg'].isnull(), 'tavg'] = df_Mumbai['tmax'] + df_Mumbai['tmin'] / 2

# Replace null values in 'tavg' with the mean of 'tavg'
df_Mumbai['tavg'].fillna(tavg_mean, inplace=True)

df_Mumbai.isnull().sum()

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df_Mumbai['tavg'])

from pmdarima import auto_arima
stepwise_fit = auto_arima(df_Mumbai['tavg'], trace=True,
suppress_warnings=True)

print(df_Mumbai.shape)
mutrain=df_Mumbai.iloc[:-30]
mutest=df_Mumbai.iloc[-30:]
print(mutrain.shape,mutest.shape)

del model
from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(mutrain['tavg'],order=(2,1,1))
model=model.fit()
model.summary()

start=len(train)
end=len(train)+len(test)-1
pred=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
pred.plot(legend=True)
mutest['tavg'].plot(legend=True)

# Set the title and axis labels
plt.title('Predicted vs Actual tavg Values')
plt.xlabel('Index')
plt.ylabel('tavg')

# Set the y-axis ticks to intervals of 10
plt.yticks(range(0, max(mutest['tavg'].astype(int))+5, 2))

plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
mutest['tavg'].mean()
rmse=sqrt(mean_squared_error(pred,mutest['tavg']))
print(rmse)

mutest_mean = mutest['tavg'].mean()
print((rmse/mutest_mean) * 100)